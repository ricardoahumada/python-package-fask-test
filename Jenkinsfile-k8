pipeline {
    agent any
    
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'kubernetes',url: 'https://github.com/ricardoahumada/python-package-flask-test'
            }
        }        
        stage('Requirements') {
            steps {
                echo 'Installing dependencies...'
                sh 'pip3 install -r requirements.txt'
            }
        }
        stage('Unit/Integration tests') {
            steps {
                echo 'Unit/Integration...'
                sh 'python3 -m unittest discover -s tests/unit -v'
            }
        }        
        stage('Acceptance tests') {
            steps {
                echo 'Acceptance...'
                sh 'python3 -m unittest discover -s tests/acceptance -v'
            }
        }     
        stage('Create image') {
            steps {
                echo 'creating image...'
                sh 'docker build -t ricardoahumdada/python-package-flask-test -f Dockerfile .'
                // sh 'docker build -t ricardobootcampregistry.azurecr.io/python-package-flask-test:v1 -f Dockerfile .'
            }
        } 
        stage('Publish image') {
            steps {
                echo 'pushing image...'
                withDockerRegistry([ credentialsId: "docker-hub-credentials", url: "" ]) {
                    sh 'docker push ricardoahumada/python-package-flask-test:latest'
                }
                /*withDockerRegistry([ credentialsId: "acr-credentials", url: "https://ricardobootcampregistry.azurecr.io" ]) {
                    sh 'docker push ricardobootcampregistry.azurecr.io/python-package-flask-test:v1'
                }*/
            }
        }
        stage('Apply Kubernetes ') {
            steps {
                withKubeConfig([credentialsId: 'k8-credentials']) {
                    sh 'kubectl apply -f k8-app-deploy/1-python-package-flask-test_deployment.yaml'
                    sh 'kubectl apply -f k8-app-deploy/2-python-package-flask-test_service.yaml'
                }
            }
        }
        stage('External acceptance tests') {
            steps{
                echo 'External acceptance tests...'
                sh 'python3 -m unittest discover -s tests/acceptance-ext -v'
            }
        }
    }
    post {
        always {
            echo 'post do this always...'
        }
        success{
            echo 'post do this when success...'
        }
        failure {
            echo 'post do this when failure...'
        }
        cleanup{
            echo 'post do this when cleanup...'
            deleteDir()
        }
    }
}